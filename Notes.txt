Implementation of Scheduler
*This implementation of a scheduler using round-robin techniques with the handling of context switches
*Round-Robin scheduler uses time slices that are assigned to each task in equal proportions
*First will use the SysTick to context switch, and later code is changed to use PendSVC
*This project will have 4 tasks

What are tasks?
    A task is nothing but a piece of code with a specific job with its own seperate stack for creating
varaibles when it runs on the CPU. When the CPU decides to remove a task, the scheduler will save it's
context(state) of the task in a private stack. So a tasks state is never lost, only postponed. 

Creating Tasks
    In this project, 4 tasks will be created in single functions called taskx_handler. They don't return
anything.

Stack Pointers
    each task will change SP from MSP PSP. The STM32F407xx has two SRAM. SRAM1 and SRAM2, which total to 
128kb of memory. This must be divided into 1kb sections for each task to have a private stack. The private
stack, or kernel stack, will have its own memory too. This means a total of 5kb will be used. ARM is full
descending, so task1 stack will have the highest memory address, growing down. 

What is Scheduling?
    Scheduling is just an algorithm which takes the decision of pre-empting a running task away
from the cpu and takes the decision about which task should run on the cpu next. This decision is based on many factors, 
such as system load, priority of tasks, shared resource access, or simple round robin method

What is context swtiching?
    Context switching is the procedure of SWITCHIN OUT of the currently running task from the CPU after 
saving the task's execution or state and SWITCHING IN the next task's to run on the CPU by retreiving the past 
execution context os state of the task.
    When exiting task, state of task needs to be saved to private stack. Stacking and unstacking is done 
like any other handler, pushing r0 through r3, r12, lr , pc and xprs to stack. When jumping from one task
to another, while in handler, change return address to next task. Push r4 to r11 manually. 

Systick Programming
    Processory clock for Cortext m defualt is 16mhz. Systick timer count is 16MHz. 1 millisecond is KHz in 
frequency domain. To bring timer count clock from 16MHz to 1KHz, use divisor(reload value). 16MHz(16000000) /
16000 count or "reload" value == 1000Hz or 1KHz. Count value is what is fed to systick timer.  
    Systick Reload Value Register (SYST_RVR) specifies the start value to load into the Systick Control
Value Register(SYST_CVR). Regsiter summary in Programmer Manual. Value loaded from RVR into CVR. CVR counts 
down and when 0, gets value from RVR again. Systick exception isn't invoked when CVR reaches zero, but rather
when new value is reloaded. So always store N - 1 count. 

Stacks
    Each task can consume 1KB of memory as a private stack. Stack is used to hold varaibles and context.
When a task is getting scheduled for the first time, it doesn't have any context, So the programmer should store
dummy SF1 and SF2 in task's stack area as part of "task initialization" sequence before launching the scheduler. For 
dummy data, keep task1 regiseter as 0 and task2 as 1 and so on. XPSR should always at least be 0x01000000 for Tbit.
PC should be address of next task handler. LR should be EXC_RETURN. There are many EXC_RETURN values, such as:
0xfffffff1 which returns in handler mode, 0xfffffff9 for return to thread mode and use msp, and 0xfffffffd for
return to thread mode using psp. In the case of context switching, use 0xfffffffd which returns psp. 
**Can't use push and pop instructions in handlers, unless intentionally trying to access MSP. Handler 
    mode always uses MSP, so don't use instruction that affect MSP when using PSP

Blocking States for Tasks
    When a task has nothing to do, it should call delay function. Tasks should have two states, running and blocked. 
Scheduler should unblock states if their blocking period is over and put them back into running state. 
